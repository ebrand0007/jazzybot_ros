head	1.4;
access;
symbols;
locks
	jazzybot:1.4; strict;
comment	@# @;


1.4
date	2017.01.22.18.20.31;	author jazzybot;	state Exp;
branches;
next	1.3;

1.3
date	2017.01.22.17.02.21;	author jazzybot;	state Exp;
branches;
next	1.2;

1.2
date	2017.01.22.15.27.03;	author jazzybot;	state Exp;
branches;
next	1.1;

1.1
date	2017.01.21.18.25.45;	author jazzybot;	state Exp;
branches;
next	;


desc
@semi working before tweaking parqams
note laser to floor is missing
@


1.4
log
@wip
on volelgrid filter downsampleing
@
text
@<?xml version="1.0"?>
<launch>
    <!-- Kinect launch -->
        <include file="$(find freenect_launch)/launch/freenect.launch">
            <arg name="depth_registration" value="true" />
        </include>



    <!-- RGBD  pointcloud to laser scan   http://wiki.ros.org/pointcloud_to_laserscan -->
        <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <!--remap from="cloud_in" to="$(arg camera)/depth_registered/points_processed"/-->
        <remap from="cloud_in" to="camera/depth_registered/points"/>
        
        <!--alternately to above, use the downsampled voxelgrid for cloud_in>
        <remap from="cloud_in" to="voxel_grid/output"/>

        <!--remap from="scan" to="$(arg camera)/scan"/-->


        <rosparam>
            #To reconfigure: rosrun dynamic_reconfigure reconfigure_gui
            #                rosrun rqt_reconfigure rqt_reconfigure
            target_frame: camera_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01

            #horizental range to mark an onbisticele min to max, min is floor, max is top of robot
            min_height: -0.37 #0.0 # min hight in meters from laser centerline to ground.  laser CL to ground is  -14in or -.355 meters
            max_height: 0.21 #-0.6 # max hight meters to mark as obsticle, this is the height of the robot above the laser

            #angle_min: -1.5708 # -M_PI/2
            #angle_max: 1.5708 # M_PI/2
            angle_increment: 0.009 #0.003 #0.087 # M_PI/360.0  #this is the angle petween laser points looing down
            scan_time: 0.3333
            range_min: 0.45
            range_max: 5.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>


            <!--emap from="image"     to="/camera/depth_registered/image_raw"/-->
            <!--remap from="camera_info" to="/camera/depth_registered/camera_info"/-->
            <!--param name="range_max" type="double" value="4"/-->
            
            <!--blieve below is default and not needed-->
            <!--remap from="scan" to="/kinect_scan"/ -->
        </node>





    <!--remap the camera for prior version (doesnt have base_laser_tf.cpp, uses static_transform_publisuer instead)
         frame as we arnt using the neato xv11, and using kinect instead-->
    <!--remap transforms: http://wiki.ros.org/tf#static_transform_publisher  -->
    <!-- Publish a static coordinate transform frame (tf) using an x/y/z offset in meters and yaw/pitch/roll in radians. 
         Last arg is The period, in milliseconds, specifies how often to send a transform. 100ms (10hz) is a good value. -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_camera_link" args=".381 0 .343 0 0 0 base_link camera_link 100"/>
    <!--node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args=".381 0 .343 0 0 0 base_link laser  100"/-->
    
    <!-- Use below or OR use this:
         < node name="base_laser_tf_broadcaster_node" pkg="linorobot" type="base_laser_tf"/-->
    <!--Note above offset must match linorobot/src/base_laser_tf.cpp for laser offset-->
    <!--OR USE robot_pose_ekf (prefered)-->
    

    
    <!--No work to remap transform, use above>
    <node pkg="tf" type="tf_remap" name="tf_remapper" output="screen">
       <rosparam param="mappings">
           [{old: camera_depth_frame, new: /laser2}]
       </rosparam>
    </node>
    <-->


    <!-- linobot laser  -->
    <!--node pkg="xv_11_laser_driver" type="neato_laser_publisher" name="xv_11_node">
      <param name="port" value="/dev/linolidar"/>
      <param name="firmware_version" value="2"/>
      <param name="frame_id" value="laser"/>
    </node>

    <node name="base_laser_tf_broadcaster_node" pkg="linorobot" type="base_laser_tf"/>
    <-->




</launch>
@


1.3
log
@Before Throtteling
@
text
@d15 4
@


1.2
log
@WIP, before tuning pointcloud_to_laser params
@
text
@d25 2
a26 2
            min_height: -0.336 #0.0 # min hight in meters for laser, laser is 14in or .336 meters off groud
            max_height: 0.406 #-0.6 # max hight meters to mark as obsticle, this is the height of the robot above the laser
d30 1
a30 1
            angle_increment: 0.003 #0.087 # M_PI/360.0  #this is the angle petween laser ponts on x/y plane
d33 1
a33 1
            range_max: 3.0
@


1.1
log
@Initial revision
@
text
@d19 2
d25 1
a25 1
            min_height: -0 .336 #0.0 # min hight in meters for laser, laser is 14in or .336 meters off groud
d33 1
a33 1
            range_max: 4.0
@
