//header for cmdDiff velocity messages
#include <ros_arduino_msgs/CmdDiffVel.h>

//header file for cmd_subscribing to "cmd_vel"
//#include "ros_lib/geometry_msgs/Twist.h"
#include <geometry_msgs/Twist.h>

//header file for pid server TODO: remove this
#include "linoPID.h"
//TODO: do we need this?
#include "lino_base_config.h"

#define COMMAND_RATE 10 //hz

line 119
typedef struct
{
  double previous_pid_error; //last measured pid error
  double total_pid_error; //overall pid error of the motor
  long previous_encoder_ticks; //last measured encoder ticks
  double current_rpm; //current speed of the motor
  double required_rpm;//desired speed of the motor 
  int pwm;//desired speed of the motor mapped to PWM
  double radians_per_sec; // speed of the motor in radians per sec = rpm * two_pi/60
}
Motor;

//create a Motor object
Motor left_motor;
Motor right_motor;


line 130 prototypes
void read_motor_rpm_(Motor * mot, long current_encoder_ticks, unsigned long dt );
void calculate_pwm(Motor * mot);
void drive_robot(int, int);

//callback function prototypes for subscribers
void command_callback( const geometry_msgs::Twist& cmd_msg);
void pid_callback( const lino_pid::linoPID& pid);

unsigned long lastMilli = 0;       
unsigned long lastMilliPub = 0;
unsigned long previous_command_time = 0;
unsigned long publish_vel_time = 0;

line 143
float Kp = k_p;
float Kd = k_d;
float Ki = k_i;


// ROS subscriber msgs
ros::Subscriber<geometry_msgs::Twist> cmd_sub("cmd_vel", command_callback);
ros::Subscriber<lino_pid::linoPID> pid_sub("pid", pid_callback);

setup {
  drive_robot(0,0);
}


main loop:
//this block stops the motor when no command is received //TODO: modify this to work with drive_robot_raw_callback
//if ((millis() - previous_command_time) >= 400)
if ( millis() > drive_robot_motor_timeout ) 
{
  left_motor.required_rpm = 0;
  right_motor.required_rpm = 0;
  right_motor.pwm = 0;
  left_motor.pwm = 0;
  drive_robot(left_motor.pwm, right_motor.pwm);  //TODO: should these be zero??
}

line 284:



//this block drives the robot based on defined rate
if ((millis() - previous_control_time) >= (1000 / COMMAND_RATE))
{
  unsigned long current_time = millis();
  unsigned long dt = current_time - previous_control_time;
  //calculate motor's current speed
  read_motor_rpm_(&left_motor, left_encoder.read(), dt);
  read_motor_rpm_(&right_motor, right_encoder.read(), dt);
  //calculate how much PWM is needed based on required RPM
  calculate_pwm(&left_motor);
  calculate_pwm(&right_motor);    
  //move the wheels based on the PWM calculated
  drive_robot(left_motor.pwm, right_motor.pwm);
  previous_control_time = millis();
}

line 369:
void pid_callback( const lino_pid::linoPID& pid) 
{
  //callback function every time PID constants are received from lino_pid for tuning
  //this callback receives pid object where P,I, and D constants are stored
  Kp = pid.p;
  Kd = pid.d;
  Ki = pid.i;
  sprintf (buffer, "P: %f D: %f D: %f", pid.p, pid.d, pid.i);
  nh.loginfo(buffer);
}


void command_callback( const geometry_msgs::Twist& cmd_msg)
{
  //callback function every time linear and angular speed is received from 'cmd_vel' topic
  //this callback function receives cmd_msg object where linear and angular speed are stored
  
  previous_command_time = millis();
  double linear_vel = cmd_msg.linear.x;
  double angular_vel = cmd_msg.angular.z;
  //convert m/s to m/min
  double linear_vel_mins = linear_vel * 60;
  //convert rad/s to rad/min
  double angular_vel_mins = angular_vel * 60;
  //calculate the wheel's circumference
  double circumference = pi * wheel_diameter;
  //calculate the tangential velocity of the wheel if the robot's rotating where Vt = Ï‰ * radius
  double tangential_vel = angular_vel_mins * (track_width / 2);
  
  //calculate and assign desired RPM for each motor
  left_motor.required_rpm = (linear_vel_mins / circumference) - (tangential_vel / circumference);
  right_motor.required_rpm = (linear_vel_mins / circumference) + (tangential_vel / circumference);
  
  //Time at which to reset motors in milisec - ohcrap situation
  drive_robot_motor_timeout=millis()+400;   //400 milisec from now
  
}

line 439
void drive_robot( int command_left, int command_right)
{
  
  //Debugging
  sprintf (buffer, "  Recieved command_left_pwm: %d", command_left);
  nh.loginfo(buffer);  
  sprintf (buffer, "  Recieved command_right_pwm: %d", command_right);
  nh.loginfo(buffer);
  
  //this functions spins the left and right wheel based on a defined speed in PWM  
  //change left motor direction
  //forward
  if (command_left >= 0)
  {
    digitalWrite(left_motor_direction, HIGH);
  }
  //reverse
  else
  {
    digitalWrite(left_motor_direction, LOW);
  }
  //spin the motor
  analogWrite(left_motor_pwm, abs(command_left));
  
  //change right motor direction
  //forward
  if (command_right >= 0)
  {
    digitalWrite(right_motor_direction, HIGH);
  }
  //reverse
  else
  {
    digitalWrite(right_motor_direction, LOW);
  }
  //spin the motor
  analogWrite(right_motor_pwm, abs(command_right));
}

void read_motor_rpm_(Motor * mot, long current_encoder_ticks, unsigned long dt )
{
  // this function calculates the motor's RPM based on encoder ticks and delta time
  
  //convert the time from milliseconds to minutes
  dt = 60000 / dt;
  //calculate change in number of ticks from the encoder
  double delta_ticks = current_encoder_ticks - mot->previous_encoder_ticks;
  //calculate wheel's speed (RPM)
  mot->current_rpm = (delta_ticks / double(encoder_pulse * gear_ratio)) * dt;
  mot->radians_per_sec = (mot->current_rpm * two_pi)/60;
  mot->previous_encoder_ticks = current_encoder_ticks;
}

void calculate_pwm(Motor * mot)
{
  // this function takes a Motor object argument,
  // implements a PID controller and calculates the PWM required to drive the motor
  double pid;
  double new_rpm;
  double error;
  
  //calculate the error ()
  error = mot->required_rpm - mot->current_rpm;
  //calculate the overall error
  mot->total_pid_error += error;
  //PID controller
  pid = Kp * error  + Ki * mot->total_pid_error + Kd * (error - mot->previous_pid_error);
  mot->previous_pid_error = error;
  //adds the calculated PID value to the required rpm for error compensation
  new_rpm = constrain(double(mot->pwm) * max_rpm / 255 + pid, -max_rpm, max_rpm);
  //maps rpm to PWM signal, where 255 is the max possible value from an 8 bit controller
  mot->pwm = (new_rpm / max_rpm) * 255;
}

-----------------------------------------------------------------
Liniar velsocity related
-----------------------------------------------------------------
#define VEL_PUBLISH_RATE 10 //hz

//header file for publishing "rpm"
#include <geometry_msgs/Vector3Stamped.h>

//JointState Messages
#include <sensor_msgs/JointState.h>

//PROTOTYPE
void publish_linear_velocity(unsigned long);

// ROS velocity publishers msgs
geometry_msgs::Vector3Stamped raw_vel_msg;
ros::Publisher raw_vel_pub("raw_vel", &raw_vel_msg);

setup()
TOD0: delete nh.subscribe(pid_sub);
TODO: delete nh.subscribe(cmd_sub);


in main loop {
  //this block publishes velocity based on defined rate
  if ((millis() - publish_vel_time) >= (1000 / VEL_PUBLISH_RATE))
  {
    unsigned long current_time = millis();
    publish_linear_velocity(current_time - publish_vel_time);
    publish_vel_time = millis();
  }
}  

void publish_linear_velocity(unsigned long time)
{
  // this function publishes the linear speed of the robot
  
  //calculate the average RPM 
  double average_rpm = (left_motor.current_rpm + right_motor.current_rpm) / 2; // RPM
  //convert revolutions per minute to revolutions per second
  double average_rps = average_rpm / 60; // RPS
  //calculate linear speed
  double linear_velocity = (average_rps * (wheel_diameter * pi)); // m/s 
  
  //fill in the object 
  raw_vel_msg.header.stamp = nh.now();
  raw_vel_msg.vector.x = linear_velocity;
  raw_vel_msg.vector.y = 0.00;
  raw_vel_msg.vector.z = double(time) / 1000;
  //publish raw_vel_msg object to ROS
  raw_vel_pub.publish(&raw_vel_msg); 
  nh.spinOnce();
}
-----------------------------------------------------------------
Joint state related
-----------------------------------------------------------------
#define JOINTSTATE_PUB_RATE 10 //hz

unsigned long previous_jointstate_time = 0;

//Joint state publiser
sensor_msgs::JointState lino_joint_state_msg;
ros::Publisher pub_jointstates("wheel_jointstate", &lino_joint_state_msg);
char *lino_joint_state_name[2]= {"left_wheel_joint","right_wheel_joint"};
float lino_joint_state_pos[2] = { 0.0,0.0 }; 
float lino_joint_state_vel[2] = { 0.0,0.0 };
float lino_joint_state_eff[2] = { 0.0,0.0 };
/* JointState details
 *  name[i]: '<component_id>' of i-th joint in message value arrays.
 *  position[i]: position of joint i rad
 *  velocity[i]: velocity of joint i in rad/s
 *  effort[i]: effort applied in joint i in Nm
 * 
 *  calculate radian position based on endocer ticks:
 *    Example: https://github.com/uos/kurt_driver/blob/kinetic/kurt_base/src/kurt_base.cc#L162
 *             http://answers.ros.org/question/185245/sensor_msgsjointstate-on-arduino/
 * 
 *  calculate velocity based on incoder tick and encoder time:
 *    Example: http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom#CA-e6fba4e92077b8226b57e9a62abdb695f9f5a84f_72
 */

float ticks_per_wheel_rotation = encoder_pulse * gear_ratio; //number of encoder tics per wheel rotation //TODO:move this out of loop
//float one_encodertick_in_radians = ( pi * wheel_diameter ) / ticks_per_wheel_rotation;
float one_encodertick_in_radians = two_pi / ticks_per_wheel_rotation;
//radian(r) is the radius of a circle.   2 pi radians(r) = 360 deg
//calculate 1 tick=how many radians
//one_encodertick_in_radians = 2 pi r / ticks_per_wheel_rotation //or pi diameter /ticks_per_wheel_rotation

setup {
  
  //Joint States
  lino_joint_state_msg.header.frame_id = "test_frameid";
  lino_joint_state_msg.name = lino_joint_state_name;
  lino_joint_state_msg.header.stamp = nh.now();
  //Set array length for wheel joints
  lino_joint_state_msg.name_length = 2; 
  lino_joint_state_msg.position_length = 2;
  lino_joint_state_msg.velocity_length = 2;
  lino_joint_state_msg.effort_length =  2;
  //assign the arrays
  lino_joint_state_msg.velocity = lino_joint_state_pos; //array of float 
  lino_joint_state_msg.position = lino_joint_state_vel; //array of float
  lino_joint_state_msg.effort =  lino_joint_state_eff;  //array of float
  nh.advertise(pub_jointstates);
}  


main loop:
//this block publishes the joint_state position and angular velocity_length
if ((millis() - previous_jointstate_time) >= (1000 / JOINTSTATE_PUB_RATE ))
{
  long left_motor_total_tics=left_encoder.read(); //long
  long right_motor_total_tics=right_encoder.read(); 
  //calculate radians and publish to lino_joint_state.position
  //ticks wrap around, so only get the remainder of the ticks
  //float remainder_left_ticks =left_motor_total_tics-(left_motor_total_tics/ticks_per_wheel_rotation)*ticks_per_wheel_rotation;
  int remainder_left_ticks  =int(left_motor_total_tics)-int((left_motor_total_tics)/ticks_per_wheel_rotation)*ticks_per_wheel_rotation;
  int remainder_right_ticks =int(right_motor_total_tics)-int((right_motor_total_tics)/ticks_per_wheel_rotation)*ticks_per_wheel_rotation;
  if (DEBUG) {
    sprintf (buffer, "remainder_left_ticks: %d", remainder_left_ticks);
    nh.loginfo(buffer);
    sprintf (buffer, "remainder_right_ticks: %d", remainder_right_ticks);
    nh.loginfo(buffer);
  }
  lino_joint_state_msg.position[0]=one_encodertick_in_radians * remainder_left_ticks; //joint state position in radians 
  lino_joint_state_msg.position[1]=one_encodertick_in_radians * remainder_right_ticks; //joint state position in radians
  lino_joint_state_msg.velocity[0]=left_motor.radians_per_sec; //TODO: this is calculated when left_motor.read() is called, timming may be off
  lino_joint_state_msg.velocity[1]=right_motor.radians_per_sec; //TODO: this is calculated when left_motor.read() is called, timming may be off
  
  //TODO: calculate velocity in radian/sec & publish to lino_joint_state.velocity
  
  //No CANDO: calualate effort and to publish to lino_joint_state.effort
  
  //Publis Joint States
  lino_joint_state_msg.header.stamp = nh.now();
  pub_jointstates.publish(&lino_joint_state_msg);
  pub_jointstates.publish(&lino_joint_state_msg);
  
  
  previous_jointstate_time = millis();
}


----------------------------------------
misc encoder info
----------------------------------------
setup {
  char s_float[20];  //convert float to string, as sprintf %f doesnt work
  dtostrf(ticks_per_wheel_rotation, 10, 4, s_float);
  /*
   w here        *
   floatvar   float variable
   StringLengthIncDecimalPoint   This is the length of the string that will be created
   numVarsAfterDecimal   The number of digits after the deimal point to print
   charbuf   the array to store the results
   */
  sprintf (buffer, "Encoder ticks_per_wheel_rotation:%s",s_float);
  nh.loginfo(buffer);
  
  dtostrf(one_encodertick_in_radians, 10, 4, s_float );
  sprintf (buffer, "one_encodertick_in_radians: %s", s_float);
  nh.loginfo(buffer);
  {